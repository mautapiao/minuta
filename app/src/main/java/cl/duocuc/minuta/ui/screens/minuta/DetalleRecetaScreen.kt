package cl.duocuc.minuta.ui.screens.minuta

import DecorativeDivider
import HeaderTitleText
import SubtitleText
import VerticalSpacer
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import cl.duocuc.minuta.R
import cl.duocuc.minuta.data.local.recetasSemana

/**
 * DetalleRecetaScreen
 * @composable: Anotaci√≥n indica que esta funci√≥n crea UI
 * dia: String: Par√°metro que recibe el d√≠a seleccionado ("Lunes", "Martes", etc)
 * onBack: ()-> Unit: Lambda sin par√°metros para manejar el bot√≥n "volver"
 *         () Unit significa "funcion que no recibe nada y no devuelve nada"
 *         en realidad si hace algo: Dame cualquier funci√≥n que no necesite
 *                                   par√°metros y no devuelva nada
 *         ej: paso para volver atr√°s :onBack = { navController.popBackStack() }
 */

@Composable
fun DetalleRecetaScreen(dia: String, onBack: () -> Unit) {

    /**
     * recetasSemana.find{ ... } : busca en la lista de recetas
     * it.dia == dia: Encuentra la receta cuyo d√≠a coincia con el par√°metro
     * resultado: si encuentra -> receta contiene el onjeto Receta
     *            si No encuentra -> receta es null
     */
    val receta = recetasSemana.find { it.dia == dia }

    /**
     * Layout principal
     * Column: Organiza elementos verticalmente (uno debajo del otro)
     * fillMaxSize(): Ocupa todo el espacio disponible de la pantalla
     * padding 16 dp: A√±ade margen  interno de 16 densuty pixels
     *
     * Titulo de la receta
     *
     * receta?.nombre: Acceso seguro al nombre, puede ser null
     * ?: "Receta": Si nombre es null, usa "Receta"
     * headlineMedium; Estilo de texto grande para titulos
     * Spacer: Crea espacio vac√≠o de 8pd de altura
     * titleMedium: Estilo para subtitulos secciones
     *
     * Lista de ingredientes:
     *
     * receta?.ingedientes?.: doble acceso seguro, recera puede ser null e ingredientes tambi√©n
     * "‚Ä¢ $ing": a√±ande vi√±eta (‚Ä¢) a cada ingrediente
     *
     * Secci√≥n recomedaciones:
     *
     * .orEmpty(): Si recomendaciones es null, devuelve cadena vac√≠a ""
     * onClick = onBack: Ejecuta la lambda que se pas√≥ como par√°metro
     */
    Box(
        modifier = Modifier
            .fillMaxSize()
    ) {
        // Imagen de fondo
        Image(
            painter = painterResource(id = R.drawable.frutas_verduras), // coloca tu imagen aqu√≠
            contentDescription = null,
            modifier = Modifier.fillMaxSize(),
            contentScale = ContentScale.Crop, // ajusta la escala al contenedor
            alpha = 0.3f
        )

        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(16.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {


            // Espacio vertical, separador
            VerticalSpacer(height = 32.dp)

            // T√≠tulo Componente ui components
            HeaderTitleText(texto = "Tu Minuta Semanal", emoji = "üç¥")

            // Subt√≠tulo
            SubtitleText("Detalle de recetas seleccionada")

            // Divisor decorativo
            DecorativeDivider()

            Card(
                modifier = Modifier.fillMaxWidth(),
                elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),
                colors = CardDefaults.cardColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            ) {
                Column(
                    modifier = Modifier.padding(16.dp) // Agrega este padding
                ) {
                    Text(
                        text = receta?.nombre ?: "Receta",
                        style = MaterialTheme.typography.headlineMedium
                    )
                    Spacer(Modifier.height(8.dp))
                    Text("Ingredientes:", style = MaterialTheme.typography.titleMedium)
                    receta?.ingredientes?.forEach { ing ->
                        Text("‚Ä¢ $ing")
                    }
                    Spacer(Modifier.height(8.dp))
                    Text("Recomendaciones:", style = MaterialTheme.typography.titleMedium)
                    Text(receta?.recomendaciones.orEmpty())
                    Spacer(Modifier.height(16.dp))
                }
                // Bot√≥n fijo abajo para cierre sesi√≥n
            }

            // Divisor decorativo
            Spacer(modifier = Modifier.height(16.dp))


            Button(
                onClick = onBack,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Volver")
            }
        }
    }
}
// ---- Preview
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun PreviewMinutaDetalleScreen() {
    MaterialTheme {
        DetalleRecetaScreen(
            dia = "Lunes",
            onBack = {}
        )
    }
}

